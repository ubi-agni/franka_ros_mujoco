<?xml version="1.0"?>
<launch>

  <!-- Robot Customization -->
  <arg name="verbose"     default="false"  doc="Should more debug output be printed?" />
  <arg name="unpause"     default="false"  doc="Should the simulation be unpaused on start?" />
  <arg name="rviz"        default="true"  doc="Should rviz be spawned?" />
  <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
  <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
  <arg name="controller"  default=" "     doc="Which example controller should be started? (One of {cartesian_impedance,model,force,joint_position,joint_velocity}_example_controller)" />
  <arg name="modelfile"   default="$(find franka_mujoco)/assets/picknplace_world.xml" doc="MuJoCo xml file to load. Should define robot model and world." />
  <arg name="headless"    default="false" />
  <arg name="num_sim_steps" default="-1" />
  <arg name="xacro_args" default="" doc="Additional arguments to pass to panda.urdf.xacro" />
  <arg name="interactive_marker" default="$(eval arg('controller') == 'cartesian_impedance_example_controller')" doc="Should the interactive marker node be started?" />
  <arg name="ns" default="" />
  <arg name="initial_joint_config" default="$(find franka_mujoco)/config/initial_joint_states.yaml" doc="Location of param file containing the initial joint states" />
  <arg name="mujoco_plugin_config" default="$(find franka_mujoco)/config/default_mjplugin_config.yaml" doc="Location of param file containing the mujoco plugin config" />
  <arg name="use_sim_time" doc="should mujoco publish its simulation time as ros time?"/>
  <arg name="wait_for_xml" default="false" doc="Should mujoco_ros wait for an xml in the parameter server?" />
  <arg name="debug" default="false" doc="Should mujoco_ros be run in gdb?" />
  <arg name="profile" default="false" doc="Should mujoco_ros be profiled?" />
  <arg name="realtime" default="1.0" doc="Fraction of desired realtime (0,1]. -1 to run as fast as possible" />
  <arg name="render_offscreen" default="true" doc="Should camera streams be rendered and published?" />

  <!-- Since robot position and orientation are defined by the xml file, these option currently do not change the robot position, but should match the position and orientation of the model file -->
  <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
  <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
  <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />

  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <param name="robot_description"
         command="xacro $(find franka_description)/robots/panda/panda.urdf.xacro
                  gazebo:=true
                  hand:=$(arg use_gripper)
                  arm_id:=$(arg arm_id)
                  xyz:='$(arg x) $(arg y) $(arg z)'
                  rpy:='$(arg roll) $(arg pitch) $(arg yaw)'
                  $(arg xacro_args)">
  </param>

  <rosparam file="$(find franka_mujoco)/config/franka_hw_sim.yaml" subst_value="true" />
  <rosparam file="$(find franka_mujoco)/config/sim_controllers.yaml" subst_value="true" />
  <rosparam file="$(arg mujoco_plugin_config)" subst_value="true" />

  <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${logger}] [${node}]: ${message}"/>
  <env if="$(arg verbose)" name="ROSCONSOLE_CONFIG_FILE"
       value="$(find franka_mujoco)/config/rosconsole.config"/>

  <group if="$(arg debug)">
    <node pkg="mujoco_ros" type="mujoco_server" name="mujoco_server" output="screen" launch-prefix="gdb -ex run --args">
      <param name="modelfile" type="str"  value="$(arg modelfile)" />
      <param name="unpause"   value="$(arg unpause)" />
      <param name="visualize" value="$(eval not arg('headless'))" />
      <param name="num_steps" value="$(arg num_sim_steps)" />
      <rosparam file="$(arg initial_joint_config)" subst_value="true" />
      <param name="wait_for_xml" value="$(arg wait_for_xml)" />
      <param name="realtime" value="$(arg realtime)" />
      <param name="render_offscreen" value="$(arg render_offscreen)" />
    </node>
  </group>

  <group unless="$(arg debug)">
    <group if="$(arg profile)">
      <env name="CPUPROFILE" value="/tmp/profile.out" />
      <node pkg="mujoco_ros" type="mujoco_server" name="mujoco_server" output="screen" >
      <!-- <node pkg="mujoco_ros" type="mujoco_server" name="mujoco_server" output="screen" launch-prefix="operf -/-callgraph -/-separate-thread "> -->
        <param name="modelfile" type="str"  value="$(arg modelfile)" />
        <param name="unpause"   value="$(arg unpause)" />
        <param name="visualize" value="$(eval not arg('headless'))" />
        <param name="num_steps" value="$(arg num_sim_steps)" />
        <rosparam file="$(arg initial_joint_config)" subst_value="true" />
        <param name="wait_for_xml" value="$(arg wait_for_xml)" />
        <param name="realtime" value="$(arg realtime)" />
        <param name="render_offscreen" value="$(arg render_offscreen)" />
      </node>
    </group>
    <group unless="$(arg profile)">
      <node pkg="mujoco_ros" type="mujoco_server" name="mujoco_server" output="screen" >
        <param name="modelfile" type="str"  value="$(arg modelfile)" />
        <param name="unpause"   value="$(arg unpause)" />
        <param name="visualize" value="$(eval not arg('headless'))" />
        <param name="num_steps" value="$(arg num_sim_steps)" />
        <rosparam file="$(arg initial_joint_config)" subst_value="true" />
        <param name="wait_for_xml" value="$(arg wait_for_xml)" />
        <param name="realtime" value="$(arg realtime)" />
        <param name="render_offscreen" value="$(arg render_offscreen)" />
      </node>
    </group>
  </group>

  <param name="m_ee" value="0.76" if="$(arg use_gripper)" />

  <!-- Spawn required ROS controllers -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_gripper_spawner"
        if="$(arg use_gripper)"
        args="franka_gripper"
        respawn="false"
  />

  <!-- spawns the controller after the robot was put into its initial joint pose -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_controller_spawner"
        respawn="false"
        output="screen"
        args="--wait-for initialized franka_state_controller $(arg controller)"
  />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node>

  <!-- Start only if cartesian_impedance_example_controller -->
  <node name="interactive_marker"
        pkg="franka_example_controllers"
        type="interactive_marker.py"
        if="$(arg interactive_marker)">
    <param name="link_name" value="$(arg arm_id)_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <node  pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz" if="$(arg rviz)"/>

</launch>
