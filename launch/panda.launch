<?xml version="1.0"?>
<launch>

  <arg name="urdf" default="$(find franka_description)/robots/panda/panda.urdf.xacro"/>
  <arg name="sim_hw_file" default="$(find franka_mujoco)/config/franka_hw_sim.yaml"  doc="Path to sim hardware interface configuration" />
  <arg name="sim_controllers_file" default="$(find franka_mujoco)/config/sim_controllers.yaml"  doc="Path to sim controller definitions" />

  <!-- Robot Customization -->
  <arg name="rviz"        default="true"  doc="Should rviz be spawned?" />
  <arg name="arm_id"      default="panda" doc="Name of the panda robot to spawn" />
  <arg name="use_gripper" default="true"  doc="Should a franka hand be mounted on the flange?" />
  <arg name="controller"  default=" "     doc="Which example controller should be started? (One of {cartesian_impedance,model,force,joint_position,joint_velocity}_example_controller)" />
  <arg name="xacro_args"  default=""      doc="Additional arguments to pass to panda.urdf.xacro" />

  <arg name="modelfile"            default="$(find franka_mujoco)/assets/picknplace_world.xml"                     doc="MuJoCo xml file to load. Should define robot model and world." />
  <arg name="interactive_marker"   default="$(eval arg('controller') == 'cartesian_impedance_example_controller')" doc="Should the interactive marker node be started?" />
  <arg name="initial_joint_states" default="$(find franka_mujoco)/config/initial_joint_states.yaml"                doc="Location of param file containing the initial joint states" />
  <arg name="mujoco_plugin_config" default="$(find franka_mujoco)/config/default_mjplugin_config.yaml"             doc="Location of param file containing the mujoco plugin config" />
  <arg name="use_sim_time" doc="should mujoco publish its simulation time as ros time?"/>

  <!-- Needed for nesting this launchfile in test launchfiles -->
  <arg name="headless" default="false" />
  <arg name="unpause"  default="false" />
  <arg name="no_x"     default="false" />
  <arg name="verbose"  default="false" />

  <!-- Since robot position and orientation are defined by the xml file, these option currently do not change the robot position, but should match the position and orientation of the model file -->
  <arg name="x"           default="0"     doc="How far forward to place the base of the robot in [m]?" />
  <arg name="y"           default="0"     doc="How far leftwards to place the base of the robot in [m]?" />
  <arg name="z"           default="0"     doc="How far upwards to place the base of the robot in [m]?" />
  <arg name="roll"        default="0"     doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
  <arg name="pitch"       default="0"     doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
  <arg name="yaw"         default="0"     doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />

  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <param name="robot_description"
         command="xacro $(arg urdf)
                  gazebo:=true
                  hand:=$(arg use_gripper)
                  arm_id:=$(arg arm_id)
                  xyz:='$(arg x) $(arg y) $(arg z)'
                  rpy:='$(arg roll) $(arg pitch) $(arg yaw)'
                  $(arg xacro_args)">
  </param>

  <rosparam file="$(arg sim_hw_file)" subst_value="true" />

  <include file="$(find mujoco_ros)/launch/launch_server.launch" pass_all_args="true" >
    <arg name="console_config_file"  value="$(find franka_mujoco)/config/rosconsole.config" />
  </include>
  <rosparam file="$(arg sim_controllers_file)" subst_value="true" />

  <param name="m_ee" value="0.76" if="$(arg use_gripper)" />

  <!-- Spawn required ROS controllers -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_gripper_spawner"
        if="$(arg use_gripper)"
        args="franka_gripper"
        respawn="false"
  />

  <!-- spawns the controller after the robot was put into its initial joint pose -->
  <node pkg="controller_manager"
        type="spawner"
        name="$(arg arm_id)_controller_spawner"
        respawn="false"
        output="screen"
        args="--wait-for initialized franka_state_controller $(arg controller)"
  />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
    <rosparam param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <param name="rate" value="30"/>
  </node>

  <!-- Start only if cartesian_impedance_example_controller -->
  <node name="interactive_marker"
        pkg="franka_example_controllers"
        type="interactive_marker.py"
        if="$(arg interactive_marker)">
    <param name="link_name" value="$(arg arm_id)_link0" />
    <remap to="cartesian_impedance_example_controller/equilibrium_pose" from="equilibrium_pose" />
  </node>

  <node  pkg="rviz" type="rviz" output="screen" name="rviz" args="-d $(find franka_example_controllers)/launch/rviz/franka_description_with_marker.rviz" if="$(arg rviz)"/>

</launch>
